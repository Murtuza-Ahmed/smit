                    CLASS-2 REACT-JS (StateFull vs StateLess | Conditional Styling | Communications)
1: {
    > Esa Component jis ke ander state use ho raha ho wo StateFull Component hoga
    > Esa Component jis ke ander state use nai ho raha ho wo StateLess Component hoga
}

2: {
    > React me (style) dete waqt style me ek object pass karen ge style={{}}
}

3: {
    > (CHILD TO PARENT) child se parent data dene kylye (props) hota he but is me (values) ya data nahi
    jaye ga balke (method) jaye ga. parent khud bataye ga ye wala kam ho ye (method) call kardena. (child)
    us method ko call karde ga. 
}

<!----------------------------------CLASS-2 REACT END--------------------------------->

<!----------------------------------CLASS-3 REACT START--------------------------------->
                    
                    CLASS-3 REACT-JS (Context API / useContext | useEffect, useEffect cleanup)

1: {
    > Multiple Context Bhi Ho sakte hn. Authentication Context, CardItem Context, All over data 
    agar chaye to usse Context me rakhen ge.
}

2: {
    > (HOW TO USE PROVIDER) jab context create karte hn to context ke ander ek (object) hota he jiske
    ander bhot sare method hote hn context ke. usme (PROVIDER) esi chiz hoti he jo (element) ki tarah 
    bihave karta he ract ke. (.PROVIDER) karke karte hn to wo ek element ban jata he. PROVIDER ke 
    element ke ander jo bhi hoga un sab ko us context ke data ka (access) hoga. 
}

3: {
    > (useEffect cleanup func Important) useEffect ka cleanup func islye important hota he. aksar esi 
    condition ajati he. us useEffect ko call karne se phele (usse phele wala useEffect usko dekhna chate hn)
    uske ander kia hwa he uske ander phele se kam start je usko khatam kar saken. 
    (useEffect ka hi function hota he cleanup function) useeffetc ke ander se (return ()=>{}) function bhejta he
}

<!----------------------------------CLASS-3 REACT END--------------------------------->